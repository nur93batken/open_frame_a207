import 'package:bloc/bloc.dart';
import 'package:hive/hive.dart';

import '../presentations/notes/models/notes_model_open_frame.dart';
import 'notes_state_open_frame.dart';

class NotesCubitOpenFrame extends Cubit<NotesStateOpenFrame> {
  NotesCubitOpenFrame() : super(NotesInitial());

  final String boxName = 'notesBox';

  void loadNotes() async {
    var box = await Hive.openBox<Note>(boxName);
    List<Note> notes = box.values.toList();
    emit(NotesLoaded(notes: notes));
  }

  void addNote(Note note) async {
    var box = await Hive.openBox<Note>(boxName);
    await box.add(note);
    loadNotes(); // –ñ–∞“£—ã –∂–∞–∑—É—É–Ω—É –∫–æ—à–∫–æ–Ω–¥–æ–Ω –∫–∏–π–∏–Ω –∫–∞–π—Ä–∞ –∂“Ø–∫—Ç”©”©
  }

  void filterNotes(String category) async {
    var box = await Hive.openBox<Note>(boxName);
    List<Note> notes =
        box.values
            .where((note) => category == "All" || note.category == category)
            .toList();
    emit(NotesLoaded(notes: notes));
  }

  /// üî• **–ñ–∞“£—ã —Ñ—É–Ω–∫—Ü–∏—è: –ë–∞—Ä–¥—ã–∫ –∂–∞–∑—É—É–ª–∞—Ä–¥—ã–Ω —Å–∞–Ω—ã–Ω –∫–∞–π—Ç–∞—Ä–∞—Ç**
  Future<int> getTotalNotesCount() async {
    var box = await Hive.openBox<Note>(boxName);
    return box.length; // –ë–∞—Ä–¥—ã–∫ –∂–∞–∑—É—É–ª–∞—Ä–¥—ã–Ω –∂–∞–ª–ø—ã —Å–∞–Ω—ã–Ω –∫–∞–π—Ç–∞—Ä–∞—Ç
  }

  /// üî• **–ñ–∞“£—ã —Ñ—É–Ω–∫—Ü–∏—è: –ë–µ–ª–≥–∏–ª“Ø“Ø –±–∏—Ä –∂–∞–∑—É—É–Ω—É ”©—á“Ø—Ä“Ø“Ø**
  void deleteNote(int index) async {
    var box = await Hive.openBox<Note>(boxName);
    await box.deleteAt(index); // –ò–Ω–¥–µ–∫—Å—Ç–µ–≥–∏ –∂–∞–∑—É—É–Ω—É ”©—á“Ø—Ä”©—Ç
    loadNotes(); // ”®—á“Ø—Ä–≥”©–Ω–¥”©–Ω –∫–∏–π–∏–Ω –∫–∞–π—Ä–∞ –∂“Ø–∫—Ç”©”©
  }

  void updateNote(int index, Note updatedNote) async {
    var box = await Hive.openBox<Note>(boxName);
    // ‚úÖ –ë—É–ª log'–¥—É —Ç–µ—Ä–º–∏–Ω–∞–ª–¥–∞ —Ç–µ–∫—à–µ—Ä
    await box.putAt(index, updatedNote); // Note'—Ç—É –∂–∞“£—ã—Ä—Ç—É—É
    loadNotes(); // –ñ–∞“£—ã—Ä—Ç—É—É–¥–∞–Ω –∫–∏–π–∏–Ω –∫–∞–π—Ä–∞ –∂“Ø–∫—Ç”©”©
  }
}
